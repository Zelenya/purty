load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_toolchain_library",
)

load(
    "//internal/version:defs.bzl",
    "version_purty",
)

load(
    "//tools/hlint:hlint.bzl",
    "hlint_test",
)

load(
    "//tools/ormolu:ormolu.bzl",
    "ormolu_format",
    "ormolu_test",
)

package(
    default_visibility = [
        "//bin:__subpackages__",
        "//ci:__subpackages__",
        "//test:__subpackages__",
    ],
)

haskell_binary(
    compiler_flags = [
        "-O2",
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
        "-optc=-static",
        "-optl=-pthread",
        "-rtsopts",
        "-static",
        "-threaded",
        "-with-rtsopts=-N",
    ] + select({
        "//:linux": [
            "-optl=-static",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        "//internal/error:haskell",
        "//internal/format:haskell",
        "//internal/log:haskell",
        "//internal/version:haskell",
        ":base",
        ":bytestring",
        "@stackage//:componentm",
        "@stackage//:optparse-applicative",
        "@stackage//:pathwalk",
        "@stackage//:purescript-cst",
        "@stackage//:rio",
    ],
    name = "purty",
    srcs = [
        "Args.hs",
        "Main.hs",
        "Purty.hs",
    ],
)

haskell_toolchain_library(
    name = "base",
)

haskell_toolchain_library(
    name = "bytestring",
)

hlint_test(
    name = "lint-hlint",
    srcs = [
        "Args.hs",
        "Main.hs",
        "Purty.hs",
    ],
)

ormolu_format(
    name = "format-ormolu",
    srcs = [
        "Args.hs",
        "Main.hs",
        "Purty.hs",
    ],
)

ormolu_test(
    name = "lint-ormolu",
    srcs = [
        "Args.hs",
        "Main.hs",
        "Purty.hs",
    ],
)

test_suite(
    name = "lint",
    tags = [
        "lint",
    ],
    tests = [
        ":lint-hlint",
        ":lint-ormolu",
    ],
)
