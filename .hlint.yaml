# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

# Control which extensions/flags/modules/functions can be used
#
- extensions:
    - name:
      - AutoDeriveTypeable
      - BangPatterns
      - BinaryLiterals
      - ConstraintKinds
      - DataKinds
      - DefaultSignatures
      - DeriveDataTypeable
      - DeriveFoldable
      - DeriveFunctor
      - DeriveGeneric
      - DeriveTraversable
      - DoAndIfThenElse
      - EmptyDataDecls
      - ExistentialQuantification
      - FlexibleContexts
      - FlexibleInstances
      - FunctionalDependencies
      - GADTs
      - GeneralizedNewtypeDeriving
      - InstanceSigs
      - KindSignatures
      - LambdaCase
      - MultiParamTypeClasses
      - MultiWayIf
      - NamedFieldPuns
      - NoImplicitPrelude
      - OverloadedStrings
      - PackageImports
      - PartialTypeSignatures
      - PatternGuards
      - PolyKinds
      - RankNTypes
      - ScopedTypeVariables
      - StandaloneDeriving
      - TupleSections
      - TypeFamilies
      - TypeSynonymInstances
      - ViewPatterns

# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# Turn on hints that are off by default
- warn:
    name: Use explicit module export list

# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}

- group:
    enabled: true
    name: generalise

# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

- ignore:
    name: Use <$>
    within: Args

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~
