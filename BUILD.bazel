load(
    "@bazel_skylib//rules:copy_file.bzl",
    "copy_file",
)

load(
    "@bazel_skylib//rules:write_file.bzl",
    "write_file",
)

load(
    "@build_bazel_rules_nodejs//:index.bzl",
    "nodejs_binary",
)

load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_test",
    "haskell_toolchain_library",
)

load(
    "//:lib/defs.bzl",
    "template_version",
    "version_purty",
)

load(
    "//tools/hlint:hlint.bzl",
    "hlint_test",
)

load(
    "//tools/ormolu:ormolu.bzl",
    "ormolu_format",
    "ormolu_test",
)

alias(
    actual = select({
        ":linux": "linux-specific-purty",
        ":macos": "macos-specific-purty",
        ":windows": "windows-specific-purty",
    },
        no_match_error = "No purty binary available for this platform",
    ),
    name = "platform-specific-purty",
)

config_setting(
    name = "linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "macos",
    constraint_values = [
        "@platforms//os:macos",
    ],
)

config_setting(
    name = "windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

copy_file(
    is_executable = True,
    name = "linux-specific-purty",
    out = "bin/linux/purty",
    src = ":purty-binary",
)

copy_file(
    is_executable = True,
    name = "macos-specific-purty",
    out = "bin/osx/purty",
    src = ":purty-binary",
)

copy_file(
    is_executable = True,
    name = "windows-specific-purty",
    out = "bin/win/purty",
    src = ":purty-binary",
)

haskell_binary(
    compiler_flags = [
        "-O2",
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
        "-optc=-static",
        "-optl=-pthread",
        "-rtsopts",
        "-static",
        "-threaded",
        "-with-rtsopts=-N",
    ] + select({
        ":linux": [
            "-optl=-static",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":base",
        ":purty",
    ],
    name = "purty-binary",
    srcs = [
        "src/Main.hs",
    ],
)

haskell_library(
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    deps = [
        ":base",
        ":bytestring",
        "@stackage//:componentm",
        "@stackage//:optparse-applicative",
        "@stackage//:pathwalk",
        "@stackage//:purescript-cst",
        "@stackage//:rio",
    ],
    name = "purty",
    src_strip_prefix = "lib",
    srcs = [
        ":templated-Version.hs",
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
    ],
)

haskell_test(
    data = glob([
        "test/golden/files/formatted/*.purs",
        "test/golden/files/original/*.purs",
    ]),
    deps = [
        ":bytestring",
        ":purty",
        "@rules_haskell//tools/runfiles:runfiles",
        "@stackage//:componentm",
        "@stackage//:rio",
        "@stackage//:tasty",
        "@stackage//:tasty-golden",
        "@stackage//:tasty-hunit",
    ],
    name = "purty-golden",
    src_strip_prefix = "test/golden",
    srcs = [
        "test/golden/Main.hs",
    ],
)

haskell_toolchain_library(
    name = "base",
)

haskell_toolchain_library(
    name = "bytestring",
)

hlint_test(
    srcs = [
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
        "lib/Version.hs",
        "src/Main.hs",
        "test/golden/Main.hs",
    ],
)

nodejs_binary(
    entry_point = "bin/purty.js",
    name = "purty.js",
)

ormolu_format(
    name = "format-ormolu",
    srcs = [
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
        "lib/Version.hs",
        "src/Main.hs",
        "test/golden/Main.hs",
    ],
)

ormolu_test(
    srcs = [
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
        "lib/Version.hs",
        "src/Main.hs",
        "test/golden/Main.hs",
    ],
)

sh_test(
    args = [
        "--purty $(location :purty-binary)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":purty-binary",
        "version/purty",
    ],
    name = "test-acceptance-binary",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

sh_test(
    args = [
        "--purty $(location :purty.js)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":platform-specific-purty",
        ":purty.js",
        "version/purty",
    ],
    name = "test-acceptance-npm",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)

template_version(
    name = "templated-Version.hs",
)

test_suite(
    name = "lint",
    tags = [
        "lint",
    ],
)

test_suite(
    name = "lint-hlint",
    tags = [
        "hlint",
        "lint",
    ],
)

test_suite(
    name = "lint-ormolu",
    tags = [
        "ormolu",
        "lint",
    ],
)

write_file(
    content = [
        version_purty,
    ],
    name = "version_purty",
    out = "version/purty",
)
