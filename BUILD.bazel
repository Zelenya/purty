load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
)

config_setting(
    name = "linux",
    constraint_values = [
        "@bazel_tools//platforms:linux",
    ],
)

haskell_binary(
    compiler_flags = [
        "-O2",
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
        "-optc=-static",
        "-optl=-pthread",
        "-rtsopts",
        "-static",
        "-threaded",
        "-with-rtsopts=-N",
    ] + select({
        ":linux": [
            "-optl=-static",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        "@stackage//:base",
        ":purty",
    ],
    name = "purty-binary",
    srcs = [
        "src/Main.hs",
    ],
)

haskell_library(
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    deps = [
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:componentm",
        "@stackage//:optparse-applicative",
        "@stackage//:pathwalk",
        "@stackage//:purescript-cst",
        "@stackage//:rio",
    ],
    extra_srcs = [
        "version/purty",
    ],
    name = "purty",
    srcs = [
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
        "lib/Version.hs",
    ],
)
