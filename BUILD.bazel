load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_test",
)

config_setting(
    name = "linux",
    constraint_values = [
        "@bazel_tools//platforms:linux",
    ],
)

haskell_binary(
    compiler_flags = [
        "-O2",
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
        "-optc=-static",
        "-optl=-pthread",
        "-rtsopts",
        "-static",
        "-threaded",
        "-with-rtsopts=-N",
    ] + select({
        ":linux": [
            "-optl=-static",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        "@stackage//:base",
        ":purty",
    ],
    name = "purty-binary",
    srcs = [
        "src/Main.hs",
    ],
)

haskell_library(
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    deps = [
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:componentm",
        "@stackage//:optparse-applicative",
        "@stackage//:pathwalk",
        "@stackage//:purescript-cst",
        "@stackage//:rio",
    ],
    extra_srcs = [
        "version/purty",
    ],
    name = "purty",
    src_strip_prefix = "lib",
    srcs = [
        "lib/Annotation.hs",
        "lib/Args.hs",
        "lib/Error.hs",
        "lib/Format.hs",
        "lib/Log.hs",
        "lib/Purty.hs",
        "lib/SourceRange.hs",
        "lib/Span.hs",
        "lib/Version.hs",
    ],
)

haskell_test(
    data = glob([
        "test/golden/files/formatted/*.purs",
        "test/golden/files/original/*.purs",
    ]),
    deps = [
        ":purty",
        "@rules_haskell//tools/runfiles:runfiles",
        "@stackage//:bytestring",
        "@stackage//:componentm",
        "@stackage//:rio",
        "@stackage//:tasty",
        "@stackage//:tasty-golden",
        "@stackage//:tasty-hunit",
    ],
    name = "purty-golden",
    src_strip_prefix = "test/golden",
    srcs = [
        "test/golden/Main.hs",
    ],
)

sh_test(
    args = [
        "--purty $(location :purty-binary)",
        "--verbose",
    ],
    data = glob([
        "test/acceptance/**/*",
    ]) + [
        ":purty-binary",
        "version/purty",
    ],
    name = "test-acceptance-binary",
    srcs = [
        "test/acceptance.sh",
    ],
    tags = [
        "coverage_requires_jvm",
        "test_requires_bash",
    ],
)
